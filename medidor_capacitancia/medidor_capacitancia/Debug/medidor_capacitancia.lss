
AVRASM ver. 2.2.7  c:\users\cliente\Documents\Atmel Studio\7.0\medidor_capacitancia\medidor_capacitancia\main.asm Mon Nov 25 18:07:41 2019

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m328pdef.inc'
c:\users\cliente\Documents\Atmel Studio\7.0\medidor_capacitancia\medidor_capacitancia\main.asm(20): Including file 'c:\users\cliente\Documents\Atmel Studio\7.0\medidor_capacitancia\medidor_capacitancia\lcd_i2c.inc'
c:\users\cliente\Documents\Atmel Studio\7.0\medidor_capacitancia\medidor_capacitancia\lcd_i2c.inc(40): Including file 'c:\users\cliente\Documents\Atmel Studio\7.0\medidor_capacitancia\medidor_capacitancia\twi_master.inc'
c:\users\cliente\Documents\Atmel Studio\7.0\medidor_capacitancia\medidor_capacitancia\lcd_i2c.inc(41): Including file 'c:\users\cliente\Documents\Atmel Studio\7.0\medidor_capacitancia\medidor_capacitancia\misc.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m328pdef.inc'
c:\users\cliente\Documents\Atmel Studio\7.0\medidor_capacitancia\medidor_capacitancia\main.asm(20): Including file 'c:\users\cliente\Documents\Atmel Studio\7.0\medidor_capacitancia\medidor_capacitancia\lcd_i2c.inc'
c:\users\cliente\Documents\Atmel Studio\7.0\medidor_capacitancia\medidor_capacitancia\lcd_i2c.inc(40): Including file 'c:\users\cliente\Documents\Atmel Studio\7.0\medidor_capacitancia\medidor_capacitancia\twi_master.inc'
c:\users\cliente\Documents\Atmel Studio\7.0\medidor_capacitancia\medidor_capacitancia\lcd_i2c.inc(41): Including file 'c:\users\cliente\Documents\Atmel Studio\7.0\medidor_capacitancia\medidor_capacitancia\misc.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; medidor_capacitancia.asm
                                 ;
                                 ; Created: 25/11/2019 15:14:12
                                 ; Author : CLIENTE
                                 ;
                                 .dseg
000100                           value: .byte 10
                                 ; Replace with your application code
                                 .cseg
                                 .org 0x0000
                                 ;ISR List vector
000000 940c 01ba                 jmp start  ; reset
                                 .org 0x0014
000014 940c 0292                 jmp ISR_capture
                                 .org 0x001a
00001a 940c 0292                 jmp ISR_capture
                                 
                                 .org INT_VECTORS_SIZE
                                 .include "lcd_i2c.inc"
                                 
                                  * lcd_i2c.inc
                                  *
                                  *  Created: 10/30/2018 11:34:34 AM
                                  *   Author: jlfragoso
                                  */ 
                                  
                                  #ifndef __LCD_I2C_INC__
                                  #define __LCD_I2C_INC__
                                 
                                 .equ LCD_ADDRESS		= (0x7c>>1)
                                 .equ RGB_ADDRESS        = (0xc4>>1)
                                 .equ LCD_POWER_UP		= 0x28
                                 .equ LCD_8BIT_2LINES	= 0x38 
                                 .equ LCD_8BIT_1LINE		= 0x30  ; power_up
                                 .equ LCD_4BIT_2LINES	= 0x28 
                                 .equ LCD_4BIT_1LINE		= 0x20 
                                 .equ LCD_DON_COFF_BOFF	= 0x0C  ;--display on, cursor off, blink off
                                 .equ LCD_DON_COFF_BON	= 0x0D  ;--display on, cursor off, blink on
                                 .equ LCD_DON_CON_BOFF	= 0x0E  ;--display on, cursor on, blink off
                                 .equ LCD_DON_CON_BON	= 0x0F  ;--display on, cursor on, blink on
                                 .equ LCD_DOFF_COFF_BOFF	= 0x08  ;--display off, cursor off, blink off
                                 .equ LCD_DOFF_COFF_BON	= 0x09  ;--display off, cursor off, blink on
                                 .equ LCD_DOFF_CON_BOFF	= 0x0A  ;--display off, cursor on, blink off
                                 .equ LCD_DOFF_CON_BON	= 0x0B  ;--display off, cursor on, blink on
                                 .equ LCD_MODE_INC		= 0x06
                                 .equ LCD_MODE_INC_SHIFT = 0x07
                                 .equ LCD_MODE_DEC		= 0x04
                                 .equ LCD_MODE_DEC_SHIF	= 0x05
                                 .equ LCD_CMD_CLEAR		= 0x01
                                 .equ LCD_RETURN_HOME	= 0x02
                                 .equ LCD_CMD_SET_CURSOR = 0x80
                                 .equ LCD_LINE_0         = 0x00
                                 .equ LCD_LINE_1         = 0x40
                                 .equ RGB_RED			= 0x04
                                 .equ RGB_GREEN			= 0x03
                                 .equ RGB_BLUE			= 0x02
                                 
                                 
                                  .include "twi_master.inc"
                                 
                                  * twi_master.inc
                                  *
                                  *  Created: 10/30/2018 10:45:48 AM
                                  *   Author: jlfragoso
                                  */ 
                                 
                                  #ifndef __TWI_MASTER_H__
                                  #define __TWI_MASTER_H__
                                 
                                  .macro _wait_twi
                                 	lds r24, TWCR
                                 	sbrs r24, TWINT
                                 	rjmp pc-3
                                 .endm
                                 
                                  .cseg
                                 
                                  TWI_ISR:
000034 9518                      	reti
                                 
                                 twi_init:
000035 9a44                      	sbi PORTC, PC4
000036 9a45                      	sbi PORTC, PC5
000037 e488                      	ldi r24, 72 
000038 9380 00b8                 	sts TWBR, r24
00003a e080                      	ldi r24, 0
00003b 9380 00b9                 	sts TWSR, r24
00003d e485                      	ldi r24, (1<< TWEN) | (1 << TWEA) | (1 << TWIE)
00003e 9380 00bc                 	sts TWCR, r24
000040 9508                      	ret
                                 
                                 twi_start:
000041 e080                      	ldi r24, 0
000042 9380 00bc                 	sts TWCR, r24
000044 ea84                      	ldi r24, (1<<TWINT) | (1<<TWSTA) | (1<<TWEN)
000045 9380 00bc                 	sts TWCR, r24
000047 9180 00bc
000049 ff87
00004a cffc                      	_wait_twi
00004b 9508                      	ret
                                 
                                 twi_stop:
00004c e984                      	ldi r24, (1<<TWINT) | (1<<TWSTO) | (1<<TWEN)
00004d 9380 00bc                 	sts TWCR, r24
00004f 9508                      	ret
                                 
                                 twi_write_byte: ;; valor no R24
000050 9380 00bb                 	sts TWDR, r24
000052 e884                      	ldi r24, (1<<TWINT) | (1<<TWEN)
000053 9380 00bc                 	sts TWCR, r24
000055 9180 00bc
000057 ff87
000058 cffc                      	_wait_twi
000059 9508                      	ret
                                 
                                 twi_read_nack:
00005a e884                      	ldi r24, (1<<TWINT) | (1<<TWEN)
00005b 9380 00bc                 	sts TWCR, r24
00005d 9180 00bc
00005f ff87
000060 cffc                      	_wait_twi
000061 9180 00bb                 	lds r24, TWDR
000063 9508                      	ret
                                 
                                 twi_read_ack:
000064 ec84                      	ldi r24, (1<<TWINT) | (1<<TWEN) | (1<<TWEA)
000065 9380 00bc                 	sts TWCR, r24
000067 9180 00bc
000069 ff87
00006a cffc                      	_wait_twi
00006b 9180 00bb                 	lds r24, TWDR
00006d 9508                      	ret
                                 
                                 twi_write_slave_reg: ;r24 slv add r25 reg add r26 data
00006e 93af                      	push r26
00006f 939f                      	push r25
000070 938f                      	push r24
000071 940e 0041                 	call twi_start
000073 918f                      	pop r24
000074 9488                      	clc  ;; add last bit as 0 to write
000075 1f88                      	rol r24 ;;
000076 940e 0050                 	call twi_write_byte  ;; write slave addr
000078 918f                      	pop r24
000079 940e 0050                 	call twi_write_byte ;; reg addr
00007b 918f                      	pop r24
00007c 940e 0050                 	call twi_write_byte ;; data
00007e 940e 004c                 	call twi_stop
000080 9508                      	ret
                                 
                                 twi_read_slave_reg: ;r24 slv add r25 reg return data r24
000081 938f                      	push r24
000082 939f                      	push r25
000083 938f                      	push r24
000084 940e 0041                 	call twi_start
000086 918f                      	pop r24
000087 9488                      	clc  ;; add last bit as 0 to write
000088 1f88                      	rol r24 ;;
000089 940e 0050                 	call twi_write_byte  ;; write slave addr
00008b 918f                      	pop r24
00008c 940e 0050                 	call twi_write_byte ;; reg addr
00008e 940e 0041                 	call twi_start
000090 918f                      	pop r24
000091 9408                      	sec
000092 1f88                      	rol r24
000093 940e 0050                 	call twi_write_byte ;; write slave addr || 1
000095 940e 005a                 	call twi_read_nack
000097 938f                      	push r24
000098 940e 004c                 	call twi_stop
00009a 918f                      	pop r24
00009b 9508                      	ret
                                 
                                 #endif
                                  .include "misc.inc"
                                 
                                  * misc.inc
                                  *
                                  *  Created: 10/30/2018 11:41:34 AM
                                  *   Author: jlfragoso
                                  */ 
                                 
                                  #ifndef __MISC_INC__
                                  #define __MISC_INC__
                                 
                                  .macro nibble_to_hex
                                 	andi @0, 0x0f
                                 	ori @0, 0x30
                                 	cpi @0, 0x3a
                                 	brmi pc+2
                                 	add @0, @1
                                 	nop
                                 .endm
                                 
                                 .macro wait_button_press
                                 	sbis @0, @1
                                 	rjmp pc-1
                                 .endm
                                 
                                 .macro wait_button_release
                                 	sbic @0, @1
                                 	rjmp pc-1
                                 .endm
                                 
                                 .macro wait_button_press_and_release
                                 	sbis @0, @1
                                 	rjmp pc-1
                                 	sbic @0, @1
                                 	rjmp pc-1
                                 .endm
                                 
                                 .macro delay_us
                                 	ldi r24, @0
                                 	rcall _delay_us
                                 .endm
                                 
                                 .macro delay_6ms
                                 	rcall delay_2ms
                                 	rcall delay_2ms
                                 	rcall delay_2ms
                                 .endm
                                 
                                 .cseg
                                 delay_1us:
00009c 0000                      	nop
00009d e082                      	ldi r24, 2
                                 loop1_d1:
00009e 958a                      	dec r24
00009f f7f1                      	brne loop1_d1
0000a0 9508                      	ret
                                 
                                 _delay_us:  ; carregar em r24 valor em us
0000a1 e093                      	ldi r25, 3
                                 loop1_d45:
0000a2 0000                      	nop
0000a3 959a                      	dec r25
0000a4 f7e9                      	brne loop1_d45
0000a5 958a                      	dec r24
0000a6 f7d1                      	brne _delay_us
0000a7 9508                      	ret
                                 
                                 delay_2ms:
0000a8 eb80                      	ldi r24, low(57520)
0000a9 ee90                      	ldi r25, high(57520)
                                 loop1_d2:
0000aa 9601                      	adiw r24,1
0000ab f7f1                      	brne loop1_d2
0000ac 9508                      	ret
                                 
                                 buffer_flush:
0000ad e00a                      	ldi r16, low(_START_BUFFER_ADDR)
0000ae e011                      	ldi r17, high(_START_BUFFER_ADDR)
0000af 9300 020a                 	sts _buffer_head, r16
0000b1 9310 020b                 	sts (_buffer_head+1), r17
0000b3 9300 020c                 	sts _buffer_tail, r16
0000b5 9310 020d                 	sts (_buffer_tail+1), r17
0000b7 e000                      	ldi r16, 0
0000b8 9300 020e                 	sts _buffer_flag, r16
0000ba 9508                      	ret
                                 
                                 buffer_write:  ; recebe r18 byte 
0000bb ef0f                      	ldi r16, 0xff
0000bc 9110 020e                 	lds r17, _buffer_flag
0000be 1701                      	cp r16, r17
0000bf f0a1                      	breq _buffer_write_ret
0000c0 9513                      	inc r17
0000c1 9310 020e                 	sts _buffer_flag, r17
0000c3 91c0 020a                 	lds yl, _buffer_head
0000c5 91d0 020b                 	lds yh, (_buffer_head+1)
0000c7 9329                      	st y+, r18 ; salvou no buffer
0000c8 e00a                      	ldi r16, low(_END_BUFFER_ADDR)
0000c9 e012                      	ldi r17, high(_END_BUFFER_ADDR)
0000ca 171d                      	cp r17, yh
0000cb f421                      	brne _buffer_write_end
0000cc 170c                      	cp r16, yl
0000cd f411                      	brne _buffer_write_end
0000ce e0ca                      	ldi yl, low(_START_BUFFER_ADDR)
0000cf e0d1                      	ldi yh, high(_START_BUFFER_ADDR)
                                 _buffer_write_end:
0000d0 93c0 020a                 	sts _buffer_head, yl
0000d2 93d0 020b                 	sts (_buffer_head+1), yh
                                 _buffer_write_ret:
0000d4 9508                      	ret
                                 
                                 buffer_read: ; retorna byte r18
0000d5 9100 020e                 	lds r16, _buffer_flag
0000d7 2300                      	tst r16
0000d8 f0a1                      	breq _buffer_read_ret
0000d9 950a                      	dec r16
0000da 9300 020e                 	sts _buffer_flag, r16
0000dc 91c0 020c                 	lds yl, (_buffer_tail)
0000de 91d0 020d                 	lds yh, (_buffer_tail+1)
0000e0 9129                      	ld r18, y+ ; le caracter
0000e1 e00a                      	ldi r16, low(_END_BUFFER_ADDR)
0000e2 e012                      	ldi r17, high(_END_BUFFER_ADDR)
0000e3 171d                      	cp r17, yh
0000e4 f421                      	brne _buffer_read_end
0000e5 170c                      	cp r16, yl
0000e6 f411                      	brne _buffer_read_end
0000e7 e0ca                      	ldi yl, low(_START_BUFFER_ADDR)
0000e8 e0d1                      	ldi yh, high(_START_BUFFER_ADDR)
                                 _buffer_read_end:
0000e9 93c0 020c                 	sts _buffer_tail, yl
0000eb 93d0 020d                 	sts (_buffer_tail+1), yh
                                 _buffer_read_ret:
0000ed 9508                      	ret
                                 
                                 
                                 int16_to_asc:
0000ee e035                      	ldi r19, 5 ; 5 casas decimais
                                 _start_conv:
0000ef e02d                      	ldi r18, 13  ; 12 bits
0000f0 e000                      	ldi r16, 0x00
0000f1 ea10                      	ldi r17, 0xA0
0000f2 e040                      	ldi r20, 0
0000f3 e050                      	ldi r21, 0
                                 _div10:
0000f4 1780                      	cp r24, r16
0000f5 0791                      	cpc r25, r17
0000f6 f020                      	brlo _next_step
0000f7 9408                      	sec
0000f8 1d41                      	adc r20, r1
0000f9 1b80                      	sub r24, r16
0000fa 0b91                      	sbc r25, r17
                                 _next_step:
0000fb 9488                      	clc
0000fc 9517                      	ror r17
0000fd 9507                      	ror r16
0000fe 9488                      	clc
0000ff 1f44                      	rol r20
000100 1f55                      	rol r21
000101 952a                      	dec r18
000102 f789                      	brne _div10
000103 9488                      	clc
000104 9557                      	ror r21
000105 9547                      	ror r20
000106 6380                      	ori r24, 0x30
000107 938f                      	push r24
000108 2f84                      	mov r24, r20
000109 2f95                      	mov r25, r21
00010a 953a                      	dec r19
00010b f719                      	brne _start_conv
00010c 910f                      	pop r16
00010d 930d                      	st x+, r16
00010e 910f                      	pop r16
00010f 930d                      	st x+, r16
000110 910f                      	pop r16
000111 930d                      	st x+, r16
000112 910f                      	pop r16
000113 930d                      	st x+, r16
000114 910f                      	pop r16
000115 930d                      	st x+, r16
000116 e000                      	ldi r16, 0
000117 930d                      	st x+, r16
000118 9508                      	ret
                                 
                                 .dseg
                                 .equ BUFFER_SIZE = 256
                                 _START_BUFFER_ADDR:
00010a                           _rbuffer: .byte BUFFER_SIZE
                                 _END_BUFFER_ADDR:
00020a                           _buffer_head: .byte 2
00020c                           _buffer_tail: .byte 2
00020e                           _buffer_flag: .byte 1
00020f                           _asc_buffer : .byte 10
                                  #endif 
                                 
                                  .macro write_lcd_cmd
                                 	ldi r26, @0
                                 	ldi r24, LCD_ADDRESS
                                 	ldi r25, 0x80
                                 	rcall twi_write_slave_reg
                                 	delay_us 50
                                 .endm
                                 
                                 .macro write_lcd_cmd_reg
                                 	mov r26, @0
                                 	ldi r24, LCD_ADDRESS
                                 	ldi r25, 0x80
                                 	rcall twi_write_slave_reg
                                 	delay_us 50
                                 .endm
                                 
                                 .macro write_lcd_data
                                 	ldi r26, @0
                                 	ldi r24, LCD_ADDRESS
                                 	ldi r25, 0x40
                                 	rcall twi_write_slave_reg
                                 	delay_us 50
                                 .endm
                                 
                                 .macro write_lcd_data_reg
                                 	mov r26, @0
                                 	ldi r24, LCD_ADDRESS
                                 	ldi r25, 0x40
                                 	rcall twi_write_slave_reg
                                 	delay_us 50
                                 .endm
                                 
                                 .macro write_rgb_reg
                                 	ldi r25, @0
                                 	ldi r26, @1
                                 	ldi r24, RGB_ADDRESS
                                 	rcall twi_write_slave_reg
                                 .endm
                                 
                                 .macro rgb_set_color
                                 	write_rgb_reg RGB_RED, @0
                                 	write_rgb_reg RGB_GREEN, @1
                                 	write_rgb_reg RGB_BLUE, @2
                                 .endm
                                 
                                 .macro lcd_set_cursor
                                 	ldi r24, @0
                                 	ldi r25, @1
                                 	rcall _lcd_set_cursor
                                 .endm
                                 
                                 .cseg
                                 lcd_init:
000119 e2a8
00011a e38e
00011b e890
00011c df51
00011d e382
00011e df82                      	write_lcd_cmd LCD_POWER_UP
00011f df88
000120 df87
000121 df86                      	delay_6ms
000122 e2a8
000123 e38e
000124 e890
000125 df48
000126 e382
000127 df79                      	write_lcd_cmd LCD_POWER_UP
000128 e684
000129 df77                      	delay_us 100
00012a e2a8
00012b e38e
00012c e890
00012d df40
00012e e382
00012f df71                      	write_lcd_cmd LCD_POWER_UP
000130 e2a8
000131 e38e
000132 e890
000133 df3a
000134 e382
000135 df6b                      	write_lcd_cmd LCD_POWER_UP
000136 e3a8
000137 e38e
000138 e890
000139 df34
00013a e382
00013b df65                      	write_lcd_cmd LCD_8BIT_2LINES
00013c e0a8
00013d e38e
00013e e890
00013f df2e
000140 e382
000141 df5f                      	write_lcd_cmd LCD_DOFF_COFF_BOFF
000142 e0a1
000143 e38e
000144 e890
000145 df28
000146 e382
000147 df59                      	write_lcd_cmd LCD_CMD_CLEAR
000148 df5f                      	rcall delay_2ms
000149 e0a6
00014a e38e
00014b e890
00014c df21
00014d e382
00014e df52                      	write_lcd_cmd LCD_MODE_INC
00014f e0ac
000150 e38e
000151 e890
000152 df1b
000153 e382
000154 df4c                      	write_lcd_cmd LCD_DON_COFF_BOFF
000155 d001                      	rcall rgb_init
000156 9508                      	ret
                                 
                                 rgb_init:
000157 e090
000158 e0a0
000159 e682
00015a df13                      	write_rgb_reg 0x00,0x00
00015b e098
00015c efaf
00015d e682
00015e df0f                      	write_rgb_reg 0x08,0xff
00015f e091
000160 e2a0
000161 e682
000162 df0b                      	write_rgb_reg 0x01,0x20
000163 e094
000164 e0a0
000165 e682
000166 df07
000167 e093
000168 e0a0
000169 e682
00016a df03
00016b e092
00016c efaf
00016d e682
00016e deff                      	rgb_set_color 0x00,0x00,0xff
00016f 9508                      	ret
                                 
                                 lcd_clear:
000170 e0a1
000171 e38e
000172 e890
000173 defa
000174 e382
000175 df2b                      	write_lcd_cmd LCD_CMD_CLEAR
000176 df31                      	rcall delay_2ms
000177 9508                      	ret
                                 
                                 _lcd_set_cursor:   ;r24 linha r25 coluna
000178 e8a0                      	ldi  r26, LCD_CMD_SET_CURSOR
000179 709f                      	andi r25, 0x0f
00017a 7081                      	andi r24, 0x01
00017b f009                      	breq _continue
00017c 64a0                      	ori r26, LCD_LINE_1
                                 _continue:
00017d 2ba9                      	or r26, r25
00017e 2faa
00017f e38e
000180 e890
000181 deec
000182 e382
000183 df1d                      	write_lcd_cmd_reg r26
000184 9508                      	ret
                                 
                                 lcd_write_str_flash: ; endereco da str em Z
                                 	; alinhar o end (x2)
000185 9488                      	clc
000186 1fee                      	rol zl
000187 1fff                      	rol zh
                                 _l1_str_from_flash:
000188 9185                      	lpm r24, z+ ;le char
000189 2388                      	tst r24
00018a f409                      	brne _p1_str ; se nao for nulo imprime
00018b 9508                      	ret
                                 _p1_str: ; imprime e volta
00018c 2fa8
00018d e38e
00018e e490
00018f dede
000190 e382
000191 df0f                      	write_lcd_data_reg r24
000192 cff5                      	rjmp _l1_str_from_flash
                                 
                                 lcd_write_str_sram: ; endereco da str em Z
                                 _l1_str_from_sram:
000193 9181                      	ld r24, z+ ;le char
000194 2388                      	tst r24
000195 f409                      	brne _p2_str ; se nao for nulo imprime
000196 9508                      	ret
                                 _p2_str: ; imprime e volta
000197 2fa8
000198 e38e
000199 e490
00019a ded3
00019b e382
00019c df04                      	write_lcd_data_reg r24
00019d cff5                      	rjmp _l1_str_from_sram
                                 
                                 lcd_write_reg_hex:
00019e 938f                      	push r24 ; guarda valor original
00019f 9582                      	swap r24
0001a0 708f                      	andi r24, 0x0f
0001a1 6380                      	ori  r24, 0x30
0001a2 338a                      	cpi r24, 0x3a
0001a3 f012                      	brmi _c1 ; continue
0001a4 e097                      	ldi r25, 0x07
0001a5 0f89                      	add r24, r25
                                 _c1: 
0001a6 2fa8
0001a7 e38e
0001a8 e490
0001a9 dec4
0001aa e382
0001ab def5                      	write_lcd_data_reg r24
0001ac 918f                      	pop r24
0001ad 708f                      	andi r24, 0x0f
0001ae 6380                      	ori  r24, 0x30
0001af 338a                      	cpi r24, 0x3a
0001b0 f012                      	brmi _c2 ; continue
0001b1 e097                      	ldi r25, 0x07
0001b2 0f89                      	add r24, r25
                                 _c2: 
0001b3 2fa8
0001b4 e38e
0001b5 e490
0001b6 deb7
0001b7 e382
0001b8 dee8                      	write_lcd_data_reg r24
0001b9 9508                      	ret
                                 
                                  #endif
                                 
                                 
                                 
                                 ; Replace with your application code
                                 start:
0001ba e008                      	ldi r16, high(RAMEND) 
0001bb bf0e                      	out sph, r16
0001bc ef0f                      	ldi r16, low(RAMEND)
0001bd bf0d                      	out spl, r16
0001be 2411                      	eor r1, r1
                                 	
0001bf de75                      	rcall twi_init
0001c0 df58                      	rcall lcd_init
                                 	
0001c1 e004                      	ldi r16, (1<<2)
0001c2 b90a                      	out DDRD, r16
0001c3 e000                      	ldi r16, 0
0001c4 b90b                      	out PORTD, r16
0001c5 e003                      	ldi r16, (1<<0)|(1<<1)
0001c6 b904                      	out DDRB, r16
0001c7 e002                      	ldi r16, 2
0001c8 b905                      	out PORTB, r16
                                 
0001c9 e9e8                      	ldi zl, low(_msg1)
0001ca e0f2                      	ldi zh, high(_msg1)
0001cb dfb9                      	rcall lcd_write_str_flash
0001cc e081
0001cd e090
0001ce dfa9                      	lcd_set_cursor 1,0
0001cf e9ee                      	ldi zl, low(_msg2)
0001d0 e0f2                      	ldi zh, high(_msg2)
0001d1 dfb3                      	rcall lcd_write_str_flash 
0001d2 9b4b
0001d3 cffe
0001d4 994b
0001d5 cffe                      	wait_button_press_and_release PIND, PD3
0001d6 df99                      	rcall lcd_clear
0001d7 e2ae
0001d8 e38e
0001d9 e490
0001da de93
0001db e382
0001dc dec4                      	write_lcd_data '.'
0001dd e407                      	ldi r16, (1<<ACBG)|(1<<ACIC)|(3<<ACIS0)
0001de bf00                      	out ACSR, r16
0001df e002                      	ldi r16, (1<<AIN1D)
0001e0 9300 007f                 	sts DIDR1, r16
                                 
                                 
0001e2 e201                      	ldi r16, (1<<ICIE1)|(1<<TOIE1)
0001e3 9300 006f                 	sts TIMSK1, r16
                                 loop_medida:
0001e5 2411                      	eor r1,r1
0001e6 2477                      	eor r7,r7
0001e7 2488                      	eor r8, r8
0001e8 2499                      	eor r9, r9
0001e9 9478                      	sei
0001ea 9210 0085                 	sts TCNT1H, r1
0001ec 9210 0084                 	sts TCNT1L, r1
0001ee ef0f                      	ldi r16, 0xff
0001ef bb06                      	out TIFR1, r16
0001f0 e803                      	ldi r16, (1<<ICNC1) | (3<<CS10)
0001f1 9300 0081                 	sts TCCR1B, r16
                                 
0001f3 9a5a                      	sbi PORTD, PD2
0001f4 e002                      	ldi r16, 2
0001f5 b905                      	out PORTB, r16
                                 espera:
0001f6 2077                      	tst r7
0001f7 f3f1                      	breq espera
                                 conv:
0001f8 94f8                      	cli
0001f9 985a                      	cbi PORTD, PD2
0001fa e000                      	ldi r16, 0
0001fb 9300 0081                 	sts TCCR1B, r16 ; stop counter
                                 
0001fd df72                      	rcall lcd_clear
0001fe e080
0001ff e090
000200 df77                      	lcd_set_cursor 0,0
000201 2d88                      		mov r24, r8
000202 2d99                      	mov r25, r9
000203 e0a0                      	ldi xl, low(value)
000204 e0b1                      	ldi xh, high(value)
000205 dee8                      	rcall int16_to_asc
                                 
000206 e0e0                      	ldi zl, low(value)
000207 e0f1                      	ldi zh, high(value) 
000208 df8a                      	rcall lcd_write_str_sram
                                 
000209 e081
00020a e090
00020b df6c                      	lcd_set_cursor 1,0
00020c eae5                      	ldi zl, low(_msg3)
00020d e0f2                      	ldi zh, high(_msg3)
00020e df76                      	rcall lcd_write_str_flash 
00020f 985a                      	cbi PORTD, 2
                                 
000210 2d08                      	mov r16, r8
000211 2d19                      	mov r17, r9
000212 24aa                      	eor r10, r10
000213 e027                      	ldi r18, 7
000214 9f02                      	mul r16, r18
000215 2c80                      	mov r8, r0
000216 2c91                      	mov r9, r1
000217 9f12                      	mul r17, r18
000218 0c90                      	add r9, r0
000219 1ca1                      	adc r10, r1
                                 
00021a 9488                      	clc
00021b 94a7                      	ror r10
00021c 9497                      	ror r9
00021d 9487                      	ror r8
00021e 9488                      	clc
00021f 94a7                      	ror r10
000220 9497                      	ror r9
000221 9487                      	ror r8
000222 9488                      	clc
000223 2d88                      	mov r24, r8
000224 2d99                      	mov r25, r9
000225 e0a0                      	ldi xl, low(value)
000226 e0b1                      	ldi xh, high(value)
000227 dec6                      	rcall int16_to_asc
                                 
000228 e0e0                      	ldi zl, low(value)
000229 e0f1                      	ldi zh, high(value) 
00022a df68                      	rcall lcd_write_str_sram
                                 fim:
00022b e6ae
00022c e38e
00022d e490
00022e de3f
00022f e382
000230 de70                      	write_lcd_data 'n'
000231 e4a6
000232 e38e
000233 e490
000234 de39
000235 e382
000236 de6a                      	write_lcd_data 'F'
                                 
000237 de70
000238 de6f
000239 de6e                      	delay_6ms
00023a de6d
00023b de6c
00023c de6b                      	delay_6ms
00023d de6a
00023e de69
00023f de68                      	delay_6ms
000240 de67
000241 de66
000242 de65                      	delay_6ms
000243 de64
000244 de63
000245 de62                      	delay_6ms
000246 de61
000247 de60
000248 de5f                      	delay_6ms
000249 de5e
00024a de5d
00024b de5c                      	delay_6ms
00024c de5b
00024d de5a
00024e de59                      	delay_6ms
00024f de58
000250 de57
000251 de56                      	delay_6ms
000252 de55
000253 de54
000254 de53                      	delay_6ms
000255 de52
000256 de51
000257 de50                      	delay_6ms
000258 de4f
000259 de4e
00025a de4d                      	delay_6ms
00025b de4c
00025c de4b
00025d de4a                      	delay_6ms
00025e de49
00025f de48
000260 de47                      	delay_6ms
000261 de46
000262 de45
000263 de44                      	delay_6ms
000264 de43
000265 de42
000266 de41                      	delay_6ms
000267 de40
000268 de3f
000269 de3e                      	delay_6ms
00026a de3d
00026b de3c
00026c de3b                      	delay_6ms
00026d de3a
00026e de39
00026f de38                      	delay_6ms
000270 de37
000271 de36
000272 de35                      	delay_6ms
000273 de34
000274 de33
000275 de32                      	delay_6ms
000276 de31
000277 de30
000278 de2f                      	delay_6ms
000279 de2e
00027a de2d
00027b de2c                      	delay_6ms
00027c de2b
00027d de2a
00027e de29                      	delay_6ms
00027f de28
000280 de27
000281 de26                      	delay_6ms
000282 de25
000283 de24
000284 de23                      	delay_6ms
000285 de22
000286 de21
000287 de20                      	delay_6ms
000288 de1f
000289 de1e
00028a de1d                      	delay_6ms
00028b de1c
00028c de1b
00028d de1a                      	delay_6ms
00028e de19
00028f de18
000290 de17                      	delay_6ms
000291 cf53                      	rjmp loop_medida
                                 
                                 ISR_capture:
000292 9080 0086                 	lds r8, ICR1L
000294 9090 0087                 	lds r9, ICR1H
000296 9473                      	inc r7
000297 9518                      	reti
                                 
                                 _constants:
000298 6143
000299 7870
00029a 654d
00029b 6574
00029c 2172
00029d 0000                      _msg1: .db "CapxMeter!",0,0
00029e 7250
00029f 7365
0002a0 2073
0002a1 7562
0002a2 7474
0002a3 6e6f
0002a4 0000                      _msg2: .db "Press button",0,0
0002a5 654d
0002a6 6964
0002a7 6f64
0002a8 203d
0002a9 0000                      _msg3: .db "Medido= ",0,0


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   6 y  :   2 z  :   2 r0 :   2 r1 :   9 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   4 r8 :   9 r9 :  10 r10:   5 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  59 r17:  17 r18:   7 r19:   2 r20:   5 
r21:   4 r22:   0 r23:   0 r24: 121 r25:  43 r26:  31 r27:   2 r28:   8 
r29:   8 r30:   6 r31:   6 
Registers used: 23 out of 35 (65.7%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   2 add   :   3 adiw  :   1 and   :   0 
andi  :   4 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   4 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   2 
brne  :  12 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  12 cbi   :   2 cbr   :   0 
clc   :   9 clh   :   0 cli   :   1 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   6 cpc   :   1 
cpi   :   2 cpse  :   0 dec   :   6 eor   :   6 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   2 jmp   :   3 
ld    :   2 ldd   :   0 ldi   : 155 lds   :  14 lpm   :   1 lsl   :   0 
lsr   :   0 mov   :  15 movw  :   0 mul   :   2 muls  :   0 mulsu :   0 
neg   :   0 nop   :   2 or    :   1 ori   :   4 out   :   9 pop   :  13 
push  :   9 rcall : 153 ret   :  22 reti  :   2 rjmp  :   9 rol   :   7 
ror   :  10 sbc   :   1 sbci  :   0 sbi   :   3 sbic  :   1 sbis  :   1 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   4 sec   :   2 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   7 std   :   0 sts   :  27 
sub   :   1 subi  :   0 swap  :   1 tst   :   4 wdr   :   0 
Instructions used: 49 out of 113 (43.4%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000554   1236     36   1272   32768   3.9%
[.dseg] 0x000100 0x000219      0    281    281    2048  13.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
